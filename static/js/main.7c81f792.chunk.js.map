{"version":3,"sources":["containers/todo/actions/todoActions.ts","containers/todo/components/todoInput/TodoInput.tsx","containers/todo/components/todoItem/TodoItem.tsx","containers/todo/components/todoList/TodoList.tsx","containers/todo/Todo.tsx","App.tsx","reducers/index.ts","containers/todo/reducers/todoReducer.ts","store/store.ts","index.tsx"],"names":["ADD_TASK","COMPLETED_TASK","REMOVE_TASK","completedTask","id","isCompleted","type","payload","useStyles","makeStyles","root","flexDirection","margin","width","color","border","borderColor","input","borderRadius","button","marginLeft","TodoInput","useState","text","setText","dispatch","useDispatch","classes","FormControl","variant","className","InputLabel","htmlFor","OutlinedInput","placeholder","value","onChange","e","currentTarget","labelWidth","Button","onClick","preventDefault","addTask","uuidv4","TodoItem","todo","style","fontSize","TodoList","todos","useSelector","state","map","Todo","App","rootReducer","combineReducers","action","filter","task","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c81f792.chunk.js","sourcesContent":["import { TaskActionTypes } from '../../../types';\r\n\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const COMPLETED_TASK = 'COMPLETED_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\n\r\n\r\nexport const addTask = (id: number | string, text: string, isCompleted: boolean): TaskActionTypes => ({\r\n  type: ADD_TASK,\r\n  payload: {\r\n    id,\r\n    text,\r\n    isCompleted,\r\n  },\r\n});\r\n\r\nexport const removeTask = (id: number | string): TaskActionTypes => ({\r\n  type: REMOVE_TASK,\r\n  payload: {\r\n    id,\r\n  },\r\n});\r\n\r\nexport const completedTask = (id: number | string, isCompleted: boolean): TaskActionTypes => ({\r\n  type: COMPLETED_TASK,\r\n  payload: {\r\n    id,\r\n    isCompleted,\r\n  },\r\n});\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { addTask } from '../../actions/todoActions';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexDirection: 'row',\r\n    margin: '50px 0 30px',\r\n    width: '90%',\r\n\r\n    '& .MuiOutlinedInput-root': {\r\n      color: '#424242',\r\n      \r\n      '& fieldset': {\r\n        border: '2px solid #5f6368'\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#3f51b5'\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#3f51b5',\r\n      },\r\n    },\r\n  },\r\n  input: {\r\n    borderRadius: 6,\r\n    width: '80%',\r\n  },\r\n  button: {\r\n    border: 0,\r\n    borderRadius: 6,\r\n    marginLeft: 10,\r\n    width: '20%',\r\n  },\r\n});\r\n\r\nexport const TodoInput = () => {\r\n  const [text, setText] = useState<string>('');\r\n  const dispatch = useDispatch();\r\n  const onTextChange = (e: React.SyntheticEvent<HTMLInputElement | HTMLTextAreaElement>) => setText(e.currentTarget.value);\r\n  const classes = useStyles();\r\n\r\n  const onSaveTaskClicked = (e: React.FormEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    if (text) {\r\n      dispatch(addTask(uuidv4(), text, false ));\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  return(\r\n    <FormControl variant=\"outlined\" className={classes.root}>\r\n      <InputLabel\r\n        htmlFor=\"input-new-task\"\r\n        variant=\"outlined\"\r\n      >\r\n        New Task\r\n      </InputLabel>\r\n      <OutlinedInput \r\n        id=\"input-new-task\"\r\n        className={classes.input}\r\n        placeholder=\"Write your task\"\r\n        value={text}\r\n        onChange={onTextChange}\r\n        labelWidth={70}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        type=\"button\"\r\n        className={classes.button}\r\n        onClick={onSaveTaskClicked}\r\n        color=\"primary\"\r\n      >\r\n        Add Task\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { completedTask, removeTask } from '../../actions/todoActions';\r\n\r\nimport './todoItem.scss';\r\n\r\ninterface TodoItemProps {\r\n  todo: {\r\n    id: number | string,\r\n    text: string,\r\n    isCompleted: boolean,\r\n  }\r\n};\r\n\r\nexport const TodoItem = ({ todo }: TodoItemProps) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return(\r\n    <div className=\"todo-item\">\r\n      <span \r\n        onClick={() => dispatch(completedTask(todo.id, todo.isCompleted))}\r\n        className=\"circle\"\r\n      >\r\n        {!todo.isCompleted ? \r\n          <RadioButtonUncheckedIcon style={{ fontSize: 30 }} /> :\r\n          <CheckCircleIcon style={{ fontSize: 30, color: '#3f51b5' }}/>\r\n        }\r\n      </span>\r\n      <span\r\n        onClick={() => dispatch(completedTask(todo.id, todo.isCompleted))}\r\n        className={todo.isCompleted ? 'completed text' : 'text'}\r\n      >\r\n        {todo.text}\r\n      </span>\r\n      <span \r\n        onClick={() => dispatch(removeTask(todo.id))}\r\n        className=\"delete-task\"\r\n      >\r\n        <CloseIcon style={{ fontSize: 30 }} />\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { TodoItem } from '../todoItem/TodoItem';\r\nimport { RootState } from '../../../../reducers/index';\r\n\r\nimport './todoList.scss';\r\n\r\nexport const TodoList = () => {\r\n  const todos = useSelector((state: RootState) => state.todo);\r\n\r\n  const renderTodos = () => {\r\n    return todos.map((todo) => <TodoItem key={todo.id} todo={todo} /> );\r\n  };\r\n\r\n  return(\r\n    <section className=\"todo-list\">\r\n      {renderTodos()}\r\n    </section>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { TodoInput } from './components/todoInput/TodoInput';\r\nimport { TodoList } from './components/todoList/TodoList';\r\n\r\nimport './todo.scss';\r\n\r\nexport const Todo:React.FC = () => {\r\n  return(\r\n    <>\r\n      <h1 className=\"todo-title\">Todo App</h1>\r\n      <div className=\"todo-wrapper\">\r\n        <TodoInput />\r\n        <TodoList />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Todo } from './containers/todo/Todo';\r\n\r\nimport './App.scss';\r\n\r\nconst App:React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Todo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { todoReducer } from '../containers/todo/reducers/todoReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  todo: todoReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { ADD_TASK, COMPLETED_TASK, REMOVE_TASK } from '../actions/todoActions';\r\nimport { TaskActionTypes, ITask } from '../../../types';\r\n\r\ntype stateTasks = ITask[];\r\n\r\nexport const todoReducer = (state: stateTasks = [], action: TaskActionTypes): stateTasks => {\r\n  switch (action.type) {\r\n    case ADD_TASK:\r\n      return [\r\n        ...state, action.payload\r\n      ];\r\n    case REMOVE_TASK:\r\n      return [...state].filter(task => task.id !== action.payload.id);\r\n    case COMPLETED_TASK:\r\n      return [...state].map(task => {\r\n        if (task.id === action.payload.id) {\r\n          return { ...task, isCompleted: !task.isCompleted };\r\n        }\r\n        return task;\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { rootReducer } from '../reducers/index';\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport { store } from './store/store';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}